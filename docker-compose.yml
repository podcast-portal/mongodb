version: '3.7'

services:
  db:
    image: mongo
    entrypoint: [ "/usr/bin/mongod", "--journal", "--bind_ip", "0.0.0.0"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${ROOTPASSWORD}
    ports:
      - target: 27017
        published: 27017
        mode: host
    volumes:
      - data:/data/db
    networks:
      - backend
    configs:
      - mongo-healthcheck
    healthcheck:
      test: ["CMD", "bash", "/mongo-healthcheck"]
      interval: 1m
      timeout: 10s
      retries: 3
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 1m30s

  express:
    image: mongo-express
    ports:
      - target: 8081
        published: 8081
        mode: host
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${ROOTPASSWORD}
      ME_CONFIG_MONGODB_SERVER: 45.148.31.135

#  controller:
#    image: martel/mongo-replica-ctrl:latest
#    volumes:
#      # TODO: Avoid exposing the docker socket (security issue)
#      - /var/run/docker.sock:/var/run/docker.sock
#    environment:
#      - OVERLAY_NETWORK_NAME=mongo_net
#      - MONGO_SERVICE_NAME=mongo_db
#      - REPLICASET_NAME=${REPLICASET_NAME:-rs}
#      - MONGO_PORT=27017
#      # - DEBUG=1 #uncomment to debug the script
#    entrypoint: python /src/replica_ctrl.py
##    networks:
##      - net
#    depends_on:
#      - "mongo"
#    deploy:
#      mode: replicated
#      replicas: 1
#      placement:
#        constraints: [node.role==manager]
#      restart_policy:
#        condition: on-failure

configs:
  # to avoid changes to the original mongo image, we import the healthcheck script using configs
  mongo-healthcheck:
    file: mongo-healthcheck

volumes:
  data:

networks:
  backend:
    external: true

